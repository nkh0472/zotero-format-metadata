
/* prettier-ignore */
/* eslint-disable */
// @ts-nocheck
// Generated by zotero-plugin-scaffold

type _PluginPrefsMap = {
  "version": string;
  "lint.onAdded": string;
  "lint.onGroup": string;
  "richtext.toolBar": string;
  "richtext.hotkey": string;
  "noDuplicationItems": string;
  "checkWebpage": string;
  "noPreprintJournalArticle": string;
  "titleSentenceCase": string;
  "title.shortTitle": string;
  "title.customTermPath": string;
  "titleDotEnd": string;
  "creatorsCase": string;
  "lang": string;
  "lang.only": string;
  "lang.only.cmn": string;
  "lang.only.eng": string;
  "lang.only.other": string;
  "dateISO": string;
  "publicationTitleCase": string;
  "abbr.journalArticle": string;
  "abbr.conferencePaper": string;
  "abbr.infer": string;
  "abbr.usefull": string;
  "abbr.usefullZh": string;
  "abbr.customDataPath": string;
  "noExtraZeros": string;
  "pagesConnector": string;
  "noDOIPrefix": string;
  "university": string;
  "thesisType": string;
  "universityPlace": string;
  "cleanExtra": string;
  "updateMetadate.confirmWhenItemTypeChange": string;
  "semanticScholarToken": string;
};

type PluginPrefKey<K extends keyof _PluginPrefsMap> = `extensions.zotero.formatmetadata.${K}`;

type PluginPrefsMap = {
  [K in keyof _PluginPrefsMap as PluginPrefKey<K>]: _PluginPrefsMap[K]
};

declare namespace _ZoteroTypes {
  interface Prefs {
    get: <K extends keyof PluginPrefsMap>(key: K, global?: boolean) => PluginPrefsMap[K];
    set: <K extends keyof PluginPrefsMap>(key: K, value: PluginPrefsMap[K], global?: boolean) => any;
  }
}
